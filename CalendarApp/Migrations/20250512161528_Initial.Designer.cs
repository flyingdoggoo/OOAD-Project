// <auto-generated />
using System;
using CalendarApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CalendarApp.Migrations
{
    [DbContext(typeof(CalendarDbContext))]
    [Migration("20250512161528_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.32")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CalendarApp.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Appointments");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Appointment");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EndTime = new DateTime(2025, 5, 13, 10, 0, 0, 0, DateTimeKind.Local),
                            Location = "Office A",
                            Name = "Meeting with Boss",
                            OwnerId = 1,
                            StartTime = new DateTime(2025, 5, 13, 9, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 2,
                            EndTime = new DateTime(2025, 5, 14, 16, 0, 0, 0, DateTimeKind.Local),
                            Location = "Home Office",
                            Name = "Project Deadline Prep",
                            OwnerId = 2,
                            StartTime = new DateTime(2025, 5, 14, 14, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("CalendarApp.Models.GroupMeetingParticipant", b =>
                {
                    b.Property<int>("GroupMeetingId")
                        .HasColumnType("int");

                    b.Property<int>("ParticipantId")
                        .HasColumnType("int");

                    b.HasKey("GroupMeetingId", "ParticipantId");

                    b.HasIndex("ParticipantId");

                    b.ToTable("GroupMeetingParticipants");

                    b.HasData(
                        new
                        {
                            GroupMeetingId = 3,
                            ParticipantId = 1
                        },
                        new
                        {
                            GroupMeetingId = 3,
                            ParticipantId = 2
                        });
                });

            modelBuilder.Entity("CalendarApp.Models.Reminder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RelatedAppointmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TriggerTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RelatedAppointmentId");

                    b.HasIndex("UserId");

                    b.ToTable("Reminders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RelatedAppointmentId = 1,
                            TriggerTime = new DateTime(2025, 5, 13, 8, 45, 0, 0, DateTimeKind.Local),
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            RelatedAppointmentId = 2,
                            TriggerTime = new DateTime(2025, 5, 14, 13, 30, 0, 0, DateTimeKind.Local),
                            UserId = 2
                        });
                });

            modelBuilder.Entity("CalendarApp.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Password = "password1",
                            Username = "user1"
                        },
                        new
                        {
                            Id = 2,
                            Password = "password2",
                            Username = "user2"
                        });
                });

            modelBuilder.Entity("CalendarApp.Models.GroupMeeting", b =>
                {
                    b.HasBaseType("CalendarApp.Models.Appointment");

                    b.HasDiscriminator().HasValue("GroupMeeting");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            EndTime = new DateTime(2025, 5, 13, 11, 30, 0, 0, DateTimeKind.Local),
                            Location = "Meeting Room 1",
                            Name = "Team Sync",
                            OwnerId = 1,
                            StartTime = new DateTime(2025, 5, 13, 11, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("CalendarApp.Models.Appointment", b =>
                {
                    b.HasOne("CalendarApp.Models.User", "Owner")
                        .WithMany("Appointments")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CalendarApp.Models.GroupMeetingParticipant", b =>
                {
                    b.HasOne("CalendarApp.Models.GroupMeeting", "GroupMeeting")
                        .WithMany("MeetingParticipants")
                        .HasForeignKey("GroupMeetingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CalendarApp.Models.User", "Participant")
                        .WithMany("MeetingParticipations")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("CalendarApp.Models.Reminder", b =>
                {
                    b.HasOne("CalendarApp.Models.Appointment", "RelatedAppointment")
                        .WithMany()
                        .HasForeignKey("RelatedAppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CalendarApp.Models.User", "User")
                        .WithMany("Reminders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
